<?xml version="1.0" encoding="UTF-8"?>
<forth xmlns="http://forth.org.ru/ForthML/">

<comment>
  bind-up: process
</comment>

<comment>
  NB: In WineHQ environment a program can start a Linux process,
  but cannot wait it or properly interact with it via pipes.

  See:

  https://msdn.microsoft.com/en-us/library/windows/desktop/ms682499(v=vs.85).aspx
  Creating a Child Process with Redirected Input and Output

  <citation title="CreateProcess doesn't set hProcess correctly when starting a Linux program"
    href="https://bugs.winehq.org/show_bug.cgi?id=18335">

    This is because Wine doesn't create a real process for non-wine programs.
    They are executed 100% outside of Wine. This will be a won't fix - Wine can't create
    a handle for something that exists outside of Wine. Especially for something like process.
  </citation>

  So, it is need to use Java for Windows to run Saxon in Wine evironemnt.
</comment>

<comment>
  NB: on a Windows platform, use
    exit /b %errorlevel%
  in the batch file, to ensure that it returns the exit status
  even in case of a script error like:
    - (file) "is not recognized as an internal or external command, operable program or batch file" (status 9009)
    - "The system cannot find the path specified" (status 3)
</comment>


<def name="cmd-prefix">
  <slit>
    <choose> OS-WINDOWS? <when><text>cmd /c </text></when> 0. </choose>
  </slit>
</def>

<template name="compose-commandline" in=" d-txt-transform ">
  <g><ss> cmd-prefix </ss>saxon -s:- -xsl:<ss/></g>
</template>



<alias name="put" word="process::put"/>

<def name="assume-transform" ds=" d-txt-filename -- ">
  2DUP <logS>info, xslt2-saxon, xsl</logS>
  process::clear
  compose-commandline process::assume-commandline
  process::start-simple
</def>

<def name="transmit-result-per" ds=" consumer-xt -- ">
  process::assume-consumer
  process::transmit-stdout
</def>

<handler name="log-error-maybe" event="cleanup" advice="before">
  <rem> It's executed before other handlers to log an error (if any) before closing </rem>
  process::p-handle <unless-exit/>
  process::exitcode-sure
  DUP <unless> DROP <exit/></unless>
  <logN>error, xslt2-saxon, exit-status</logN>
</handler>

<def name="close" ds=" -- ">
  log-error-maybe
  process::clear
</def>

</forth>
